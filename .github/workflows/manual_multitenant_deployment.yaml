name: Manual multitenant deployment for brand specific

on:
  workflow_dispatch:
    inputs:
      Brand:
        description: 'Brand_name'
        required: true
        type: choice
        options:
        - moes
        - jamba
        - mca


env:
  REGISTRY: 'ghcr.io'
  IMAGE_NAME: 'focus-brands/gx-api-payment/gx-api-payment-${{ vars.HELM_RELEASE_NAME }}'
  HELM_PATH: './charts/gx-api-payment/'
  TAG_NAME: 'prod'
  PKG_NAME: '@focus-brands/gx-api-payment'
  API_NAME: 'payment'
  VERSION: 'v1'
  BRANCH_NAME: ${{ github.ref_name }}
  NAMESPACE: 'prod'
  REPO_NAME: 'gx-api-payment'
  CLUSTER_NAME: ${{ vars.CLUSTER_NAME}}
  RESOURCE_GROUP: ${{ vars.RESOURCE_GROUP}}
  HELM_RELEASE_NAME: ${{ vars.HELM_RELEASE_NAME}}
  APIM_NAME: ${{ vars.APIM_NAME}}
  WEB_URL: ${{ vars.WEB_URL}}
  PDEVWEB_URL: ${{ vars.PDEVWEB_URL}}
  PQAWEB_URL: ${{ vars.PQAWEB_URL}}
  DOMAIN_URL: ${{ vars.DOMAIN_URL}}

permissions:
  contents: read
  packages: write
jobs:
  set-environment:
    runs-on: ubuntu-latest
    environment: Prod_Approve
    outputs:
      pri_env_name: ${{ steps.set-env.outputs.pri_env_name }}
      sec_env_name: ${{ steps.set-env.outputs.sec_env_name }}
      api_prefix: ${{ steps.set-env.outputs.api_prefix }}

    steps:
      - name: Set Environment Variable based on branch
        id: set-env
        run: |
          if [[ "${{ github.event.inputs.Brand }}" == "moes" ]]; then
             echo "pri_env_name=prd-primary" >> $GITHUB_OUTPUT
             echo "sec_env_name=prd-secondary" >> $GITHUB_OUTPUT
             echo "api_prefix=" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.inputs.Brand }}" == "jamba" ]]; then
             echo "pri_env_name=jam-prd-primary" >> $GITHUB_OUTPUT
             echo "sec_env_name=jam-prd-secondary" >> $GITHUB_OUTPUT
             echo "api_prefix=jamba-" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.inputs.Brand }}" == "mca" ]]; then
             echo "pri_env_name=mca-prd-primary" >> $GITHUB_OUTPUT
             echo "sec_env_name=mca-prd-secondary" >> $GITHUB_OUTPUT
             echo "api_prefix=" >> $GITHUB_OUTPUT
          fi
          
  deploy-image:
    needs: [set-environment]
    runs-on: ubuntu-latest
    environment:  ${{ matrix.env_name }}
    permissions:
      contents: read
      packages: read
      id-token: write
    strategy:
      matrix:
        env_name:
          - ${{ needs.set-environment.outputs.pri_env_name }}
          - ${{ needs.set-environment.outputs.sec_env_name }}
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set the namespace name
        id: step_one
        run: |
          echo "NAMESPACE_CLEAN=$(echo "${NAMESPACE//\//-}" | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_ENV"

      - name: Set the values file based on env_name
        run: echo "VALUES_FILE=values-${{ matrix.env_name }}" >> "$GITHUB_ENV"

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.CLIENT_ID }}
          tenant-id: ${{ secrets.TENANT_ID }}
          subscription-id: ${{ secrets.SUBSCRIPTION_ID }}

      - name: Set K8S context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ env.RESOURCE_GROUP }}
          cluster-name: ${{ env.CLUSTER_NAME }}

      - name: Replace namespace name
        run: |
          sed -i "s/REPLACE_ME/$NAMESPACE_CLEAN/g" manifests/namespace.yaml

      - name: Create namespace
        uses: azure/k8s-deploy@v4
        with:
          name: ${{ env.NAMESPACE_CLEAN }}
          manifests: |
            manifests/namespace.yaml
          strategy: basic
          action: deploy

      - name: Read file content
        id: file-content
        run: |
          # Replace 'file.txt' with the actual path to your file
          content=$(cat manifests/secrets/${{ env.HELM_RELEASE_NAME }}/${{ github.event.inputs.Brand }}/${{ matrix.env_name }}-akv-secret-sync.yaml)
          echo "::set-output name=content::$content"

      - name: Check if file content is empty
        id: check-content
        run: |
          if [ -z "${{ steps.file-content.outputs.content }}" ]; then
            echo "File content is empty."
            echo "::set-output name=empty::true"
          else
            echo "File content is not empty."
            echo "::set-output name=empty::false"
          fi

      - name: Deploy secrets injection to AKS
        if: ${{ steps.check-content.outputs.empty != 'true' }}
        uses: azure/k8s-deploy@v4
        with:
          namespace: ${{ env.NAMESPACE_CLEAN }}
          manifests: |
            manifests/secrets/${{ env.HELM_RELEASE_NAME }}/${{ github.event.inputs.Brand }}/${{ matrix.env_name }}-akv-secret-sync.yaml
          strategy: basic
          action: deploy

      - name: Update the variables in runtime
        run: |
          sed -i "s/latest/${{github.run_number}}/" ${{ env.HELM_PATH }}${{ env.VALUES_FILE }}-${{ env.HELM_RELEASE_NAME }}.yaml
          sed -i "s/buildnumber/${{github.run_number}}/" ${{ env.HELM_PATH }}${{ env.VALUES_FILE }}-${{ env.HELM_RELEASE_NAME }}.yaml
          sed -i "s/VERSION/${{env.VERSION}}/g" ${{ env.HELM_PATH }}${{ env.VALUES_FILE }}-${{ env.HELM_RELEASE_NAME }}.yaml

      - name: view values.yml
        run: cat ${{ env.HELM_PATH }}${{ env.VALUES_FILE }}-${{ env.HELM_RELEASE_NAME }}.yaml

      - uses: azure/k8s-bake@v2.4
        with:
          renderEngine: 'helm'
          releaseName: ${{ env.HELM_RELEASE_NAME }}
          helmChart: '${{ env.HELM_PATH }}'
          overrideFiles: '${{ env.HELM_PATH }}${{ env.VALUES_FILE }}-${{ env.HELM_RELEASE_NAME }}.yaml'
          helm-version: 'latest'
        id: bake

      - name: Show container registry url
        run: |
          echo ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.BRANCH_NAME }}

      - name: Deploy to AKS
        uses: azure/k8s-deploy@v4
        with:
          namespace: ${{ env.NAMESPACE_CLEAN }}
          manifests: |
            ${{ steps.bake.outputs.manifestsBundle }}
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.BRANCH_NAME }}
          imagepullsecrets: |
            ghcr-pull-cr
          pull-images: false,
          strategy: basic
          action: deploy

      - name: Azure Setup Swagger on APIM
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
              az account show
              az aks install-cli
              az aks get-credentials --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.CLUSTER_NAME }}
              export LB_IP=$(kubectl get services -n ${{ env.NAMESPACE_CLEAN }} -o json | jq -r '.items[] | select(.spec.type=="LoadBalancer" and .metadata.name=="${{ needs.set-environment.outputs.api_prefix }}${{ env.HELM_RELEASE_NAME }}-${{env.VERSION}}-gx-api-${{ env.API_NAME }}").status.loadBalancer.ingress[].ip')
              echo $LB_IP
              az apim api create --api-id "${{ env.API_NAME}}-${{ env.HELM_RELEASE_NAME }}-services-openapi-${{env.VERSION}}" --display-name "OpenAPI ${{ env.API_NAME }} ${{ env.HELM_RELEASE_NAME }} ${{env.VERSION}}" -g ${{ env.RESOURCE_GROUP }} -n ${{ env.APIM_NAME }} --service-url http://$LB_IP:80 --path "/${{ env.HELM_RELEASE_NAME }}/${{ env.VERSION}}/${{ env.API_NAME}}-swagger" 
              
              if az apim api operation list -g ${{ env.RESOURCE_GROUP }} -n ${{ env.APIM_NAME }} --api-id "${{ env.API_NAME}}-${{ env.HELM_RELEASE_NAME }}-services-openapi-${{env.VERSION}}" | grep -q "Get OpenAPI Spec"; then
                echo "OpenAPI Spec operation already exists"
                export OP_ID=$(az apim api operation list -g ${{ env.RESOURCE_GROUP }} -n ${{ env.APIM_NAME }} --api-id ${{ env.API_NAME}}-${{ env.HELM_RELEASE_NAME }}-services-openapi-${{env.VERSION}} | jq -r '.[] | select(.urlTemplate=="/docs-json").name')
                az apim api operation update -g ${{ env.RESOURCE_GROUP }} -n ${{ env.APIM_NAME }} --api-id "${{ env.API_NAME}}-${{ env.HELM_RELEASE_NAME }}-services-openapi-${{env.VERSION}}" --display-name "Get OpenAPI Spec ${{ env.HELM_RELEASE_NAME }}" --method "GET" --url-template "/docs-json" --operation-id $OP_ID
              else 
                echo "Creating the OpenAPI Spec operation"
                az apim api operation create -g ${{ env.RESOURCE_GROUP }} -n ${{ env.APIM_NAME }} --api-id "${{ env.API_NAME}}-${{ env.HELM_RELEASE_NAME }}-services-openapi-${{env.VERSION}}" --display-name "Get OpenAPI Spec ${{ env.HELM_RELEASE_NAME }}" --method "GET" --url-template "/docs-json"
              fi        
              if az apim api operation list -g ${{ env.RESOURCE_GROUP }} -n ${{ env.APIM_NAME }} --api-id "${{ env.API_NAME}}-${{ env.HELM_RELEASE_NAME }}-services-openapi-${{env.VERSION}}" | grep -q "Get OpenAPI Page"; then
                echo "OpenAPI Page operation already exists"
              else
                echo "Creating the OpenAPI Page operation"
                az apim api operation create -g ${{ env.RESOURCE_GROUP }} -n ${{ env.APIM_NAME }} --api-id "${{ env.API_NAME}}-${{ env.HELM_RELEASE_NAME }}-services-openapi-${{env.VERSION}}" --display-name "Get OpenAPI Page ${{ env.HELM_RELEASE_NAME }}" --method "GET" --url-template "/docs"
                az apim api operation create -g ${{ env.RESOURCE_GROUP }} -n ${{ env.APIM_NAME }} --api-id "${{ env.API_NAME}}-${{ env.HELM_RELEASE_NAME }}-services-openapi-${{env.VERSION}}" --display-name "Get OpenAPI Page Assets ${{ env.HELM_RELEASE_NAME }}" --method "GET" --url-template "/docs/{asset}" --template-parameters name=asset description=Asset type=string required="true"
              fi
              
      - name: Azure Setup APIM
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
              az account show
              az aks install-cli
              az aks get-credentials --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.CLUSTER_NAME }}
              export LB_IP=$(kubectl get services -n ${{ env.NAMESPACE_CLEAN }} -o json | jq -r '.items[] | select(.spec.type=="LoadBalancer" and .metadata.name=="${{ needs.set-environment.outputs.api_prefix }}${{ env.HELM_RELEASE_NAME }}-${{env.VERSION}}-gx-api-${{ env.API_NAME }}").status.loadBalancer.ingress[].ip')                                                                                                 
              
              # Retry mechanism to check Swagger document availability
              
              for i in {1..5}; do
                if curl -I -s -o /dev/null -w "%{http_code}" "https://${{ env.APIM_NAME }}.azure-api.net/${{ env.HELM_RELEASE_NAME }}/${{env.VERSION}}/${{ env.API_NAME}}-swagger/docs-json" | grep -q "200"; then
                  break
                else
                  echo "Swagger document not available, retrying in 30 seconds..."
                  sleep 60
              fi
              done
          
              export API_ID=$(az apim api list -g ${{ env.RESOURCE_GROUP }} -n ${{ env.APIM_NAME }} | jq -r '.[] | select(.path=="${{ env.HELM_RELEASE_NAME }}/${{env.VERSION}}/${{ env.API_NAME}}").name')
              if test -z "$API_ID"                                                                                          
              then
                echo "Creating API $LB_IP and $API_ID are the values found"
                az apim api import -g ${{ env.RESOURCE_GROUP }} --service-name ${{ env.APIM_NAME }} --display-name ${{ env.PKG_NAME }}-${{ env.HELM_RELEASE_NAME }}-${{env.VERSION}} --path "/${{ env.HELM_RELEASE_NAME }}/${{ env.VERSION }}/${{ env.API_NAME}}" --specification-url https://${{ env.APIM_NAME }}.azure-api.net/${{ env.HELM_RELEASE_NAME }}/${{ env.VERSION }}/${{ env.API_NAME}}-swagger/docs-json --specification-format OpenApiJson --service-url http://$LB_IP:80 --subscription-required false
              else
                echo "API already exists $LB_IP and $API_ID are the values found"
                az apim api import -g ${{ env.RESOURCE_GROUP }} --service-name ${{ env.APIM_NAME }} --display-name ${{ env.PKG_NAME }}-${{ env.HELM_RELEASE_NAME }}-${{env.VERSION}} --path "/${{ env.HELM_RELEASE_NAME }}/${{ env.VERSION }}/${{ env.API_NAME}}" --specification-url https://${{ env.APIM_NAME }}.azure-api.net/${{ env.HELM_RELEASE_NAME }}/${{ env.VERSION }}/${{ env.API_NAME}}-swagger/docs-json --specification-format OpenApiJson --service-url http://$LB_IP:80 --api-id $API_ID --subscription-required false
              fi
              export API_ID=$(az apim api list -g ${{ env.RESOURCE_GROUP }} -n ${{ env.APIM_NAME }} | jq -r '.[] | select(.path=="${{ env.HELM_RELEASE_NAME }}/${{env.VERSION}}/${{ env.API_NAME}}").name')
              
              if [ ${{ matrix.env_name == 'needs.set-environment.outputs.pri_env_name' || matrix.env_name == 'needs.set-environment.outputs.sec_env_name' }} ]; then

                  echo "Setting CORS policy for prod environment"
                  echo "WEB_URL: ${WEB_URL}"
                  echo "DOMAIN_URL: ${DOMAIN_URL}"
                  allowed_origins="<origin>${{ env.WEB_URL }}</origin><origin>${{ env.DOMAIN_URL }}</origin>"
              fi
              
              xml_payload="<policies><inbound><base /><cors allow-credentials=\\\"true\\\"><allowed-origins>${allowed_origins}</allowed-origins><allowed-methods><method>*</method></allowed-methods><allowed-headers><header>*</header></allowed-headers><expose-headers><header>*</header></expose-headers></cors></inbound><backend><base /></backend><outbound><base /></outbound><on-error><base /></on-error></policies>"
              
              echo "Final XML Payload:"
              echo "${xml_payload}"
              
              az rest --method PUT --uri "https://management.azure.com/subscriptions/${{ secrets.SUBSCRIPTION_ID }}/resourceGroups/${{ env.RESOURCE_GROUP }}/providers/Microsoft.ApiManagement/service/${{ env.APIM_NAME }}/apis/$API_ID/policies/policy?api-version=2021-08-01" --body "{ \"properties\": { \"value\": \"${xml_payload}\", \"format\": \"rawxml\" } }"